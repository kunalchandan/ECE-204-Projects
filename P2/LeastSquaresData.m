classdef LeastSquaresData < handle
    properties
        Head;
        Data;
        Integral;
        Delta_t;
    end
    methods
        function obj = LeastSquaresData( dt, init )
            obj.Head = 1;
            obj.Data = init*ones( 5, 1 );
            obj.Integral = 0.0;
            obj.Delta_t = dt;
        end
        function [] = add( obj, val )
            % Enter your implementation here
            obj.Head = mod1(obj.Head + 1, length(obj.Data));
            obj.Data(obj.Head) = val;
            
            i = ((obj.Data(mod1(obj.Head  , length(obj.Data)))*0.50) + ...
                 (obj.Data(mod1(obj.Head-1, length(obj.Data)))*0.35) + ...
                 (obj.Data(mod1(obj.Head-2, length(obj.Data)))*0.20) + ...
                 (obj.Data(mod1(obj.Head-3, length(obj.Data)))*0.05) - ...
                 (obj.Data(mod1(obj.Head-4, length(obj.Data)))*0.10))*obj.Delta_t;
            obj.Integral = obj.Integral + i;
        end
        function [y] = current( obj )
            % Enter your implementation here
            y = (obj.Data(mod1(obj.Head  , length(obj.Data)))*0.6) + ...
                (obj.Data(mod1(obj.Head-1, length(obj.Data)))*0.4) + ...
                (obj.Data(mod1(obj.Head-2, length(obj.Data)))*0.2) - ...
                (obj.Data(mod1(obj.Head-4, length(obj.Data)))*0.2);
        end
        function [y] = next( obj )
            % Enter your implementation here
            y = (obj.Data(mod1(obj.Head  , length(obj.Data)))*0.8) + ...
                (obj.Data(mod1(obj.Head-1, length(obj.Data)))*0.5) + ...
                (obj.Data(mod1(obj.Head-2, length(obj.Data)))*0.2) - ...
                (obj.Data(mod1(obj.Head-3, length(obj.Data)))*0.1) - ...
                (obj.Data(mod1(obj.Head-4, length(obj.Data)))*0.4);
        end
        function [y] = diff( obj )
            % Enter your implementation here
            y = ((obj.Data(mod1(obj.Head  , length(obj.Data)))*0.2) + ...
                 (obj.Data(mod1(obj.Head-1, length(obj.Data)))*0.1) - ...
                 (obj.Data(mod1(obj.Head-3, length(obj.Data)))*0.1) - ...
                 (obj.Data(mod1(obj.Head-4, length(obj.Data)))*0.2))/obj.Delta_t;
        end
        function [y] = diff2( obj )
            % Enter your implementation here
            y = ((obj.Data(mod1(obj.Head  , length(obj.Data)))*2) - ...
                 (obj.Data(mod1(obj.Head-1, length(obj.Data)))*1) - ...
                 (obj.Data(mod1(obj.Head-2, length(obj.Data)))*2) - ...
                 (obj.Data(mod1(obj.Head-3, length(obj.Data)))*1) + ...
                 (obj.Data(mod1(obj.Head-4, length(obj.Data)))*2))/ ...
                (7*(obj.Delta_t^2));
        end
        function [y] = int( obj )
            % This is done for you...
            y = obj.Integral;
        end
    end
end
function r = mod1( m, n )
    r = mod( m + n - 1, n ) + 1;
end